# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2018-04-04 18:34
from __future__ import unicode_literals

import json

from django.db import migrations

from dashboard.checks.builder import nnrti_paed, stable_patients_check


def create_default_tests(apps, schema_editor):
    default_tests = [
        {
            "name": "NRTI vs. INSTI/NNRTI/PI Patient Volumes (PAED)",
            "slug": "nrti-vs-insti-nnrti-pi-patient-volumes-paed",
            "definition": nnrti_paed(),
        },
        {
            "name": "STABLE PATIENTS",
            "slug": "stable-patients",
            "order": 15,
            "definition": stable_patients_check(),
            "description": "This test is carried out for the system's three Sample Formulations: 1) Adult TDF/3TC/EFV (300/300/600mg), 2) Paediatric ABC/3TC (120/60mg), and 3) Paediatric EFV(200mg)\r\n\r\nTests if the facility's total Patient number (i.e. Existing + New patients) in a given cycle is stable relative to that of the previous cycle, with stability defined as a change of less than 50%. This test is run for the system's three Sample Formulations but excludes facilities that are considered \"low volume\", according to the following rules:\r\n\r\n1) For Sample Formulation 1, Adult TDF/3TC/EFV: Total patients in either cycle on regimen TDF/3TC/EFV must be at least 10\r\n\r\n2) For Sample Formulation 2, Paediatric ABC/3TC: Total paediatric patients in either cycle on regimens ABC/3TC/EFV and ABC/3TC/NVP must be at least 5\r\n\r\n3) For Sample Formulation 3, Efavirenz 200: Total paediatric patients in either cycle on regimens ABC/3TC/EFV and AZT/3TC/EFV must be at least 5",
            "short_description": "Patient volumes change by less than 50% vs. previous cycle?",
        },
    ]

    model = apps.get_registered_model("dashboard", "FacilityTest")
    for test in default_tests:
        query_set = model.objects.filter(slug=test.get("slug"))
        if len(query_set) > 0:
            print("updating ", test.get("slug"))
            query_set.update(
                name=test.get("name"), definition=json.dumps(test.get("definition"))
            )
        else:
            print("adding ", test.get("slug"))
            model.objects.create(
                name=test.get("name"),
                definition=json.dumps(test.get("definition")),
                description=test.get("description"),
                short_description=test.get("short_description"),
                order=test.get("order"),
            )


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [("dashboard", "0047_facilitytest_slug")]

    operations = [migrations.RunPython(create_default_tests, reverse)]
